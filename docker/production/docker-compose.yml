version: '3.8'

name: personal-ai-prod

services:
  # Database Services
  chromadb:
    image: chromadb/chroma:latest
    container_name: pai-chromadb-prod
    volumes:
      - chromadb_data:/chroma/chroma
      - ../../data/chromadb/credentials:/chroma/chroma/credentials:ro
    environment:
      - CHROMA_SERVER_AUTHN_CREDENTIALS_FILE=/chroma/chroma/credentials
      - CHROMA_SERVER_AUTHN_PROVIDER=basic
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
    networks:
      - pai-internal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M

  neo4j:
    image: neo4j:5.20-community
    container_name: pai-neo4j-prod
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - ../../configs/neo4j/neo4j.conf:/conf/neo4j.conf:ro
    environment:
      - NEO4J_AUTH=${NEO4J_USER}/${NEO4J_PASSWORD}
      - NEO4J_PLUGINS=["graph-data-science"]
      - NEO4J_dbms_security_procedures_unrestricted=gds.*
      - NEO4J_dbms_memory_heap_initial_size=1g
      - NEO4J_dbms_memory_heap_max_size=4G
      - NEO4J_dbms_memory_pagecache_size=2G
      - NEO4J_dbms_connector_bolt_listen_address=0.0.0.0:7687
      - NEO4J_dbms_connector_http_listen_address=0.0.0.0:7474
    networks:
      - pai-internal
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "${NEO4J_USER}", "-p", "${NEO4J_PASSWORD}", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 6G
        reservations:
          memory: 2G

  # Ollama Service (with GPU support)
  ollama:
    image: ollama/ollama:latest
    container_name: pai-ollama-prod
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_MODELS=/root/.ollama/models
      - OLLAMA_NUM_PARALLEL=4
      - OLLAMA_MAX_LOADED_MODELS=2
    networks:
      - pai-internal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 60s
      timeout: 30s
      retries: 3
    restart: unless-stopped
    # Uncomment for GPU support
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: all
    #           capabilities: [gpu]

  # Personal AI Memory Service
  personal-ai-memory:
    build:
      context: ../../..
      dockerfile: personal-ai-memory/Dockerfile
    container_name: pai-memory-prod
    volumes:
      - ../../data/logs:/app/logs
    environment:
      - CHROMADB_HOST=chromadb
      - CHROMADB_PORT=8000
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=${NEO4J_USER}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENVIRONMENT=production
      - API_SECRET_KEY=${MEMORY_API_SECRET_KEY}
    depends_on:
      chromadb:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    networks:
      - pai-internal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M

  # Personal AI Gateway Service  
  personal-ai-gateway:
    build:
      context: ../../..
      dockerfile: personal-ai-gateway/Dockerfile
    container_name: pai-gateway-prod
    volumes:
      - ../../data/logs:/app/logs
    environment:
      - MEMORY_SYSTEM_URL=http://personal-ai-memory:8001
      - MEMORY_SYSTEM_API_KEY=${MEMORY_API_SECRET_KEY}
      - OLLAMA_BASE_URL=http://ollama:11434
      - OLLAMA_MODEL=${OLLAMA_MODEL:-llama3.2:1b}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4}
      - API_KEYS=${GATEWAY_API_KEYS}
      - HOST=0.0.0.0
      - PORT=8080
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      personal-ai-memory:
        condition: service_healthy
      ollama:
        condition: service_healthy
    networks:
      - pai-internal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M

  # Open WebUI
  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: pai-webui-prod
    volumes:
      - openwebui_data:/app/backend/data
    environment:
      - WEBUI_NAME="Personal AI Assistant"
      - OPENAI_API_BASE_URL=http://personal-ai-gateway:8080/v1
      - ENABLE_RAG_HYBRID_SEARCH=true
      - ENABLE_RAG_WEB_LOADER_SSL_VERIFICATION=true
      - DEFAULT_USER_ROLE=user
      - ENABLE_SIGNUP=${ENABLE_SIGNUP:-false}
      - WEBUI_AUTH=true
      - WEBUI_SECRET_KEY=${WEBUI_SECRET_KEY}
    depends_on:
      personal-ai-gateway:
        condition: service_healthy
    networks:
      - pai-internal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M

  # Caddy Reverse Proxy with Automatic HTTPS
  caddy:
    image: caddy:latest
    container_name: pai-caddy-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../../configs/caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
      - ../../data/logs/caddy:/var/log/caddy
    environment:
      - DOMAIN=${DOMAIN}
      - EMAIL=${ADMIN_EMAIL}
    depends_on:
      - open-webui
      - personal-ai-gateway
    networks:
      - pai-internal
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 64M

  # Monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: pai-prometheus-prod
    volumes:
      - ../../configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - pai-internal
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M

networks:
  pai-internal:
    driver: bridge
    name: personal-ai-prod-network

volumes:
  chromadb_data:
    driver: local
  neo4j_data:  
    driver: local
  neo4j_logs:
    driver: local
  ollama_data:
    driver: local
  openwebui_data:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local
  prometheus_data:
    driver: local